{
  "address": "0x6723659425DfdF94caf6345fA269855066FB57f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fem",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_devTokenBips",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_saleStartTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_saleDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_timeToSpend",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_minimumEthRaised",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "activateGoverness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fem",
      "outputs": [
        {
          "internalType": "contract IFem",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "femErecter",
      "outputs": [
        {
          "internalType": "contract FemErecter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governess",
      "outputs": [
        {
          "internalType": "contract Governess",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockController",
      "outputs": [
        {
          "internalType": "contract TimelockController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
  "receipt": {
    "to": null,
    "from": "0xAdb14a1728A603691f948e3480C98461Fb06e738",
    "contractAddress": "0x6723659425DfdF94caf6345fA269855066FB57f0",
    "transactionIndex": 17,
    "gasUsed": "5533637",
    "logsBloom": "0x000000040000000009000000000010000a0000000000000000800000000008000000000000010000000000000011000000200000000000000200000010200000000000000000000000000000000000000001000000000000000010000001000040000000020000480002000000000800000000000000000000020000000000601000002040000000040002000200000000040000000001080800002010000002000000000020000000000000000400000020001000000000001000002000400000000000000000004000000000000000000200001000000100080000800020000000000002001000000000000000000000000000000000010000800000002000",
    "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27",
    "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0x710C7E422A98963d6BA216840b1d83E77064A031",
        "topics": [
          "0xc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 45,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0x710C7E422A98963d6BA216840b1d83E77064A031",
        "topics": [
          "0x7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004cb4",
        "logIndex": 46,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0x710C7E422A98963d6BA216840b1d83E77064A031",
        "topics": [
          "0xccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 47,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0x710C7E422A98963d6BA216840b1d83E77064A031",
        "topics": [
          "0x0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 48,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0x710C7E422A98963d6BA216840b1d83E77064A031",
        "topics": [
          "0x08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006723659425dfdf94caf6345fa269855066fb57f0",
        "logIndex": 49,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0xf78A448E464a1fEB693D76c9211D2d03ae488206",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0xf78A448E464a1fEB693D76c9211D2d03ae488206",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0xf78A448E464a1fEB693D76c9211D2d03ae488206",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0xf78A448E464a1fEB693D76c9211D2d03ae488206",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5",
          "0x0000000000000000000000006723659425dfdf94caf6345fa269855066fb57f0",
          "0x0000000000000000000000006723659425dfdf94caf6345fa269855066fb57f0"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0xf78A448E464a1fEB693D76c9211D2d03ae488206",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5",
          "0x000000000000000000000000f78a448e464a1feb693d76c9211d2d03ae488206",
          "0x0000000000000000000000006723659425dfdf94caf6345fa269855066fb57f0"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0xf78A448E464a1fEB693D76c9211D2d03ae488206",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
          "0x000000000000000000000000710c7e422a98963d6ba216840b1d83e77064a031",
          "0x0000000000000000000000006723659425dfdf94caf6345fa269855066fb57f0"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0xf78A448E464a1fEB693D76c9211D2d03ae488206",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x000000000000000000000000710c7e422a98963d6ba216840b1d83e77064a031",
          "0x0000000000000000000000006723659425dfdf94caf6345fa269855066fb57f0"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0xf78A448E464a1fEB693D76c9211D2d03ae488206",
        "topics": [
          "0x11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a300",
        "logIndex": 57,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0xf78A448E464a1fEB693D76c9211D2d03ae488206",
        "topics": [
          "0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5",
          "0x0000000000000000000000006723659425dfdf94caf6345fa269855066fb57f0",
          "0x0000000000000000000000006723659425dfdf94caf6345fa269855066fb57f0"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 14524400,
        "transactionHash": "0xcdf76601de53c354962bb6e85df61a66a3e6baafd8e69a5dbd8482edeeb70d6f",
        "address": "0x914a4bC879567fEcde2dC81F495a5d8d68187671",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f78a448e464a1feb693d76c9211d2d03ae488206"
        ],
        "data": "0x",
        "logIndex": 59,
        "blockHash": "0xdd3aedc838e6d14c3bbb2397bf4aa8368d5ff9209db9f1088f500da0e683fc27"
      }
    ],
    "blockNumber": 14524400,
    "cumulativeGasUsed": "7037019",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf344b01da08b142d2466dae9e47e333f22e64588",
    "0x07ceC3217606C9204c763574848725b714F14985",
    1000,
    1649376000,
    1209600,
    6393600,
    "25000000000000000000"
  ],
  "solcInputHash": "ae30f723a0979411404a1619feea51e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devTokenBips\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_saleStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_saleDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_timeToSpend\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_minimumEthRaised\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"activateGoverness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fem\",\"outputs\":[{\"internalType\":\"contract IFem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"femErecter\",\"outputs\":[{\"internalType\":\"contract FemErecter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governess\",\"outputs\":[{\"internalType\":\"contract Governess\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockController\",\"outputs\":[{\"internalType\":\"contract TimelockController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Deployer for Fem governance contracts and FemErecter. Deploys governance in an unusable state, then activates the contracts once the sale is successful.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GovernessActivator.sol\":\"GovernessActivator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/Governor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"../utils/math/SafeCast.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Timers.sol\\\";\\nimport \\\"./IGovernor.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended though various modules.\\n *\\n * This contract is abstract and requires several function to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {getVotes}\\n * - Additionanly, the {votingPeriod} must also be implemented\\n *\\n * _Available since v4.3._\\n */\\nabstract contract Governor is Context, ERC165, EIP712, IGovernor {\\n    using SafeCast for uint256;\\n    using Timers for Timers.BlockNumber;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n\\n    struct ProposalCore {\\n        Timers.BlockNumber voteStart;\\n        Timers.BlockNumber voteEnd;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n\\n    /**\\n     * @dev Restrict access of functions to the governance executor, which may be the Governor itself or a timelock\\n     * contract, as specified by {_executor}. This generally means that function with this modifier must be voted on and\\n     * executed through the governance protocol.\\n     */\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {name} and {version}\\n     */\\n    constructor(string memory name_) EIP712(name_, version()) {\\n        _name = name_;\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\\n     */\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IGovernor).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-version}.\\n     */\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hashProposal}.\\n     *\\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n     * advance, before the proposal is submitted.\\n     *\\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n     * accross multiple networks. This also means that in order to execute the same operation twice (on the same\\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-state}.\\n     */\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if (snapshot == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        if (snapshot >= block.number) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if (deadline >= block.number) {\\n            return ProposalState.Active;\\n        }\\n\\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalSnapshot}.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart.getDeadline();\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd.getDeadline();\\n    }\\n\\n    /**\\n     * @dev Part of the Governor Bravo's interface: _\\\"The number of votes required in order for a voter to become a proposer\\\"_.\\n     */\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Amount of votes already cast passes the threshold limit.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Is the proposal successful or not.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Register a vote with a given support and voting weight.\\n     *\\n     * Note: Support is generic and can represent various things depending on the voting system used.\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual;\\n\\n    /**\\n     * @dev See {IGovernor-propose}.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        require(\\n            getVotes(msg.sender, block.number - 1) >= proposalThreshold(),\\n            \\\"GovernorCompatibilityBravo: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(proposal.voteStart.isUnset(), \\\"Governor: proposal already exists\\\");\\n\\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\\n        uint64 deadline = snapshot + votingPeriod().toUint64();\\n\\n        proposal.voteStart.setDeadline(snapshot);\\n        proposal.voteEnd.setDeadline(deadline);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-execute}.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Internal execution mechanism. Can be overriden to implement different execution mechanism\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            Address.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\\n     * canceled to allow distinguishing it from executed proposals.\\n     *\\n     * Emits a {IGovernor-ProposalCanceled} event.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVote}.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReason}.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteBySig}.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\\n        _countVote(proposalId, account, support, weight);\\n\\n        emit VoteCast(account, proposalId, support, weight, reason);\\n\\n        return weight;\\n    }\\n\\n    /**\\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\\n     */\\n    function relay(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual onlyGovernance {\\n        Address.functionCallWithValue(target, data, value);\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\\n     * through another contract such as a timelock.\\n     */\\n    function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n}\\n\",\"keccak256\":\"0xfaf7663a441cf4161aeceda4907949d537d409b4348e6b242b2a74b4a2d56ce2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernor is IERC165 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast.\\n     *\\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x4a3702e2556bc04120a353119d50cb5edbc6f5c9c5504b04e598b9195b0e5471\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/TimelockController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with a given `minDelay`.\\n     */\\n    constructor(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors\\n    ) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // deployer + self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // register proposers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _beforeCall(id, predecessor);\\n        _call(id, 0, target, value, data);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            _call(id, i, targets[i], values[i], datas[i]);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     *\\n     * Emits a {CallExecuted} event.\\n     */\\n    function _call(\\n        bytes32 id,\\n        uint256 index,\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) private {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n\\n        emit CallExecuted(id, index, target, value, data);\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n}\\n\",\"keccak256\":\"0x61357e3fe6a0a93c779bc75f730d219458b268ffd19c0c0a6f31c7eb0f435466\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimple is Governor {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(uint256 proposalId)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 againstVotes,\\n            uint256 forVotes,\\n            uint256 abstainVotes\\n        )\\n    {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n        return (proposalvote.againstVotes, proposalvote.forVotes, proposalvote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalvote.forVotes + proposalvote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        return proposalvote.forVotes > proposalvote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual override {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        require(!proposalvote.hasVoted[account], \\\"GovernorVotingSimple: vote already cast\\\");\\n        proposalvote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalvote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalvote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalvote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"GovernorVotingSimple: invalid value for enum VoteType\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42fdf674e422c97ee262f0dd1e636de1ee6c1556e61e38b167217e49381eff1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorSettings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for settings updatable through governance.\\n *\\n * _Available since v4.4._\\n */\\nabstract contract GovernorSettings is Governor {\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n    uint256 private _proposalThreshold;\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    /**\\n     * @dev Initialize the governance parameters.\\n     */\\n    constructor(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingDelay}.\\n     */\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingPeriod}.\\n     */\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    /**\\n     * @dev See {Governor-proposalThreshold}.\\n     */\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        return _proposalThreshold;\\n    }\\n\\n    /**\\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    /**\\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    /**\\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting delay.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting period.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        // voting period must be at least one block long\\n        require(newVotingPeriod > 0, \\\"GovernorSettings: voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the proposal threshold.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\\n        _proposalThreshold = newProposalThreshold;\\n    }\\n}\\n\",\"keccak256\":\"0xab3781f09dfb447d0c2f5bbb2aafc9ff86333f16c61580ab85d7c8a87491eab9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorTimelockControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernorTimelock.sol\\\";\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../TimelockController.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\n * {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly.\\n *\\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\\n * inaccessible.\\n *\\n * WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it\\n * grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are\\n * available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively\\n * executing a Denial of Service attack. This risk will be mitigated in a future release.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\\n    TimelockController private _timelock;\\n    mapping(uint256 => bytes32) private _timelockIds;\\n\\n    /**\\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\\n     */\\n    event TimelockChange(address oldTimelock, address newTimelock);\\n\\n    /**\\n     * @dev Set the timelock.\\n     */\\n    constructor(TimelockController timelockAddress) {\\n        _updateTimelock(timelockAddress);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\\n     */\\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\\n        ProposalState status = super.state(proposalId);\\n\\n        if (status != ProposalState.Succeeded) {\\n            return status;\\n        }\\n\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\n        bytes32 queueid = _timelockIds[proposalId];\\n        if (queueid == bytes32(0)) {\\n            return status;\\n        } else if (_timelock.isOperationDone(queueid)) {\\n            return ProposalState.Executed;\\n        } else if (_timelock.isOperationPending(queueid)) {\\n            return ProposalState.Queued;\\n        } else {\\n            return ProposalState.Canceled;\\n        }\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the address of the timelock\\n     */\\n    function timelock() public view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the eta of a queued proposal\\n     */\\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\n    }\\n\\n    /**\\n     * @dev Function to queue a proposal to the timelock.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Governor: proposal not successful\\\");\\n\\n        uint256 delay = _timelock.getMinDelay();\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\\n\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Overriden execute function that run the already queued proposal through the timelock.\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override {\\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\n     * been queued.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override returns (uint256) {\\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\\n\\n        if (_timelockIds[proposalId] != 0) {\\n            _timelock.cancel(_timelockIds[proposalId]);\\n            delete _timelockIds[proposalId];\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. In this case, the timelock.\\n     */\\n    function _executor() internal view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\n     * must be proposed, scheduled, and executed through governance proposals.\\n     *\\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\\n     */\\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\\n        _updateTimelock(newTimelock);\\n    }\\n\\n    function _updateTimelock(TimelockController newTimelock) private {\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\n        _timelock = newTimelock;\\n    }\\n}\\n\",\"keccak256\":\"0x027e928dff85e88a4c24d5530f61fd6db43052e1430f3f3c7469b6d54ed87f87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../utils/IVotes.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotes is Governor {\\n    IVotes public immutable token;\\n\\n    constructor(IVotes tokenAddress) {\\n        token = tokenAddress;\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        return token.getPastVotes(account, blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0x8f181616d38bc85021c06f1b3acce5ee05339864416b2d328948fb46a378c77f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./GovernorVotes.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\\n    uint256 private _quorumNumerator;\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    /**\\n     * @dev Initialize quorum as a fraction of the token's total supply.\\n     *\\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\\n     * customized by overriding {quorumDenominator}.\\n     */\\n    constructor(uint256 quorumNumeratorValue) {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    /**\\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\\n     */\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumerator;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\\n     */\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum for a block number, in terms of number of votes: `supply * numerator / denominator`.\\n     */\\n    function quorum(uint256 blockNumber) public view virtual override returns (uint256) {\\n        return (token.getPastTotalSupply(blockNumber) * quorumNumerator()) / quorumDenominator();\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Must be called through a governance proposal.\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = _quorumNumerator;\\n        _quorumNumerator = newQuorumNumerator;\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\\n\",\"keccak256\":\"0xc3dee116eda4152b8e6ff4b51cc9cce35bc9ce27b1ea91e95f7f381315bcb78d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IGovernor.sol\\\";\\n\\n/**\\n * @dev Extension of the {IGovernor} for timelock supporting modules.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorTimelock is IGovernor {\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\n\\n    function timelock() public view virtual returns (address);\\n\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n}\\n\",\"keccak256\":\"0xe6234ac4ba0508a3371a46543cdf4bf3a1a404d2d3c3470006741a0da294f974\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Timers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary Timers {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x29791a62950a7983e02a673639c1a781d1e448691800456c2ce4b99715391b14\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/FemErecter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './InitializedOwnable.sol';\\nimport './IFemErecter.sol';\\n\\ncontract FemErecter is InitializedOwnable, IFemErecter {\\n  using SafeERC20 for IERC20;\\n\\n  IFem public immutable override fem;\\n  address public immutable override devAddress;\\n  uint256 public immutable override devTokenBips;\\n  uint256 public immutable override saleStartTime;\\n  uint256 public immutable override saleEndTime;\\n  uint256 public immutable override saleDuration;\\n  uint256 public immutable override spendDeadline;\\n  uint256 public immutable override minimumEthRaised;\\n\\n  bool public override ethClaimed;\\n  mapping(address => uint256) public override depositedAmount;\\n\\n  modifier requireState(SaleState _state, string memory errorMessage) {\\n    require(state() == _state, errorMessage);\\n    _;\\n  }\\n\\n  constructor(\\n    address _owner,\\n    address _devAddress,\\n    uint256 _devTokenBips,\\n    address _fem,\\n    uint32 _saleStartTime,\\n    uint32 _saleDuration,\\n    uint32 _timeToSpend,\\n    uint256 _minimumEthRaised\\n  ) InitializedOwnable(_owner) {\\n    require(_devTokenBips > 0, 'devTokenBips can not be 0');\\n    require(_devTokenBips <= 1000, 'devTokenBips too high');\\n    require(_saleStartTime > block.timestamp, 'start too early');\\n    devAddress = _devAddress;\\n    devTokenBips = _devTokenBips;\\n    fem = IFem(_fem);\\n    saleStartTime = _saleStartTime;\\n    uint256 endTime = _saleStartTime + _saleDuration;\\n    saleEndTime = endTime;\\n    saleDuration = _saleDuration;\\n    spendDeadline = endTime + _timeToSpend;\\n    minimumEthRaised = _minimumEthRaised;\\n  }\\n\\n  /**\\n   * @dev Reports the current state of the token sale.\\n   */\\n  function state() public view override returns (SaleState) {\\n    if (block.timestamp < saleStartTime) return SaleState.PENDING;\\n    if (block.timestamp < saleEndTime) return SaleState.ACTIVE;\\n    // If ETH has been claimed, the sale was a success\\n    if (ethClaimed) return SaleState.SUCCESS;\\n    // If insufficient ETH has been raised or deadline has passed, sale was a failure\\n    if (address(this).balance < minimumEthRaised || block.timestamp >= spendDeadline) return SaleState.FAILURE;\\n    // Sale is over with enough ETH raised, deadline has not passed to spend it\\n    return SaleState.FUNDS_PENDING;\\n  }\\n\\n  /**\\n   * @notice Allows governance to claim ETH raised from the sale.\\n   * note: Only callable if {state()} is {SaleState.FUNDS_PENDING}\\n   * - Sale is over.\\n   * - Spend deadline has not passed.\\n   * - ETH has not already been claimed.\\n   * - More than {minimumEthRaised} was raised by the sale.\\n   */\\n  function claimETH(address to)\\n    external\\n    override\\n    onlyOwner\\n    requireState(SaleState.FUNDS_PENDING, 'Funds not pending governance claim')\\n  {\\n    ethClaimed = true;\\n    uint256 amount = address(this).balance;\\n    _sendETH(to, amount);\\n    emit EthClaimed(to, amount);\\n    fem.mint(devAddress, (fem.totalSupply() * devTokenBips) / 10000);\\n    fem.transferOwnership(owner());\\n  }\\n\\n  /**\\n   * @notice Deposit ETH in exchange for equivalent amount of FEM.\\n   * note: Only callable if {state()} is {SaleState.ACTIVE}\\n   * - Sale has started.\\n   * - Sale is not over.\\n   */\\n  function deposit() external payable override requireState(SaleState.ACTIVE, 'Sale not active') {\\n    require(msg.value > 0, 'Can not deposit 0 ETH');\\n    depositedAmount[msg.sender] += msg.value;\\n    fem.mint(msg.sender, msg.value);\\n    emit Deposit(msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @notice Burn FEM in exchange for equivalent amount of ETH.\\n   * note: Only callable if {state()} is {SaleState.FAILURE}\\n   * - Sale is over.\\n   * - Insufficient ETH raised OR spend deadline has passed without ETH being claimed.\\n   */\\n  function burnFem(uint256 amount) public override requireState(SaleState.FAILURE, 'Sale has not failed') {\\n    fem.burn(msg.sender, amount);\\n    _sendETH(_msgSender(), amount);\\n    emit Withdraw(msg.sender, amount);\\n  }\\n\\n  function _sendETH(address to, uint256 amount) internal {\\n    (bool success, ) = to.call{value: amount}('');\\n    require(success, 'Failed to transfer ETH');\\n  }\\n}\\n\",\"keccak256\":\"0x5fa0f1d661bb0b3570359f46456c59faeb01df92efdab9f305b9c43ff99d6b28\",\"license\":\"MIT\"},\"contracts/Governess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/governance/Governor.sol';\\nimport '@openzeppelin/contracts/governance/extensions/GovernorSettings.sol';\\nimport '@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol';\\nimport '@openzeppelin/contracts/governance/extensions/GovernorVotes.sol';\\nimport '@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol';\\nimport '@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol';\\n\\n/// @custom:security-contact Twitter: @femboydao / Discord: 0xFem#1337 / Email: security@femboydao.com\\ncontract Governess is\\n  Governor,\\n  GovernorSettings,\\n  GovernorCountingSimple,\\n  GovernorVotes,\\n  GovernorVotesQuorumFraction,\\n  GovernorTimelockControl\\n{\\n  constructor(\\n    address _token,\\n    address _timelock,\\n    uint256 _proposalThreshold\\n  )\\n    Governor('Governess')\\n    GovernorSettings(\\n      1, /* 1 block */\\n      19636, /* 3 days */\\n      _proposalThreshold\\n    )\\n    GovernorVotes(IVotes(_token))\\n    GovernorVotesQuorumFraction(4)\\n    GovernorTimelockControl(TimelockController(payable(_timelock)))\\n  {}\\n\\n  // The following functions are overrides required by Solidity.\\n\\n  function votingDelay() public view override(IGovernor, GovernorSettings) returns (uint256) {\\n    return super.votingDelay();\\n  }\\n\\n  function votingPeriod() public view override(IGovernor, GovernorSettings) returns (uint256) {\\n    return super.votingPeriod();\\n  }\\n\\n  function quorum(uint256 blockNumber) public view override(IGovernor, GovernorVotesQuorumFraction) returns (uint256) {\\n    return super.quorum(blockNumber);\\n  }\\n\\n  function getVotes(address account, uint256 blockNumber)\\n    public\\n    view\\n    override(IGovernor, GovernorVotes)\\n    returns (uint256)\\n  {\\n    return super.getVotes(account, blockNumber);\\n  }\\n\\n  function state(uint256 proposalId) public view override(Governor, GovernorTimelockControl) returns (ProposalState) {\\n    return super.state(proposalId);\\n  }\\n\\n  function propose(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    string memory description\\n  ) public override(Governor, IGovernor) returns (uint256) {\\n    return super.propose(targets, values, calldatas, description);\\n  }\\n\\n  function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {\\n    return super.proposalThreshold();\\n  }\\n\\n  function _execute(\\n    uint256 proposalId,\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    bytes32 descriptionHash\\n  ) internal override(Governor, GovernorTimelockControl) {\\n    super._execute(proposalId, targets, values, calldatas, descriptionHash);\\n  }\\n\\n  function _cancel(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    bytes32 descriptionHash\\n  ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\\n    return super._cancel(targets, values, calldatas, descriptionHash);\\n  }\\n\\n  function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {\\n    return super._executor();\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(Governor, GovernorTimelockControl)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x27def816fedc7b0e7e44d7ea2969ecb7ddf60ada0137f8b3f5e012a2a4600718\",\"license\":\"MIT\"},\"contracts/GovernessActivator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/governance/TimelockController.sol';\\nimport './Governess.sol';\\nimport './FemErecter.sol';\\n\\n/**\\n * @notice Deployer for Fem governance contracts and FemErecter.\\n * Deploys governance in an unusable state, then activates the\\n * contracts once the sale is successful.\\n */\\ncontract GovernessActivator {\\n  TimelockController public immutable timelockController;\\n  Governess public immutable governess;\\n  IFem public immutable fem;\\n  FemErecter public immutable femErecter;\\n\\n  constructor(\\n    address _fem,\\n    address _devAddress,\\n    uint256 _devTokenBips,\\n    uint32 _saleStartTime,\\n    uint32 _saleDuration,\\n    uint32 _timeToSpend,\\n    uint256 _minimumEthRaised\\n  ) {\\n    fem = IFem(_fem);\\n    Governess _governess = new Governess(_fem, address(this), type(uint256).max);\\n    governess = _governess;\\n    address[] memory proposers = new address[](1);\\n    address[] memory executors = new address[](1);\\n    proposers[0] = address(_governess);\\n    executors[0] = address(_governess);\\n    TimelockController timelock = new TimelockController(2 days, proposers, executors);\\n    timelockController = timelock;\\n    timelockController.renounceRole(keccak256('TIMELOCK_ADMIN_ROLE'), address(this));\\n    femErecter = new FemErecter(\\n      address(timelock),\\n      _devAddress,\\n      _devTokenBips,\\n      _fem,\\n      _saleStartTime,\\n      _saleDuration,\\n      _timeToSpend,\\n      _minimumEthRaised\\n    );\\n  }\\n\\n  function activateGoverness() external {\\n    require(\\n      femErecter.state() == IFemErecter.SaleState.FUNDS_PENDING,\\n      'Can not activate governess before sale succeeds'\\n    );\\n    uint256 finalSupply = (fem.totalSupply() * (10000 + femErecter.devTokenBips())) / 10000;\\n    uint256 proposalThreshold = finalSupply / 100;\\n    governess.setProposalThreshold(proposalThreshold);\\n    governess.updateTimelock(timelockController);\\n  }\\n}\\n\",\"keccak256\":\"0x6ecd69d5cdd401e74899bc8a62047bae781aeb9373eaedead8fa0736950c333a\",\"license\":\"MIT\"},\"contracts/IFemErecter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFem {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(address src, uint256 amount) external;\\n\\n  function transferOwnership(address newOwner) external;\\n\\n  function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IFemErecter {\\n  /**\\n   * @notice Emitted when ETH is deposited.\\n   */\\n  event Deposit(address indexed account, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when ETH is withdrawn and FEM is burned.\\n   */\\n  event Withdraw(address indexed account, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when ETH is claimed by the DAO.\\n   */\\n  event EthClaimed(address to, uint256 amount);\\n\\n  enum SaleState {\\n    PENDING, // Sale has not started yet\\n    ACTIVE, // Sale is active\\n    FUNDS_PENDING, // Sale complete with more than minimum ETH raised, pending use by DAO\\n    SUCCESS, // Sale complete with ETH claimed by DAO\\n    FAILURE // Sale complete with less than minimum ETH raised OR funds not used in time\\n  }\\n\\n  /* View Functions */\\n\\n  function devAddress() external view returns (address);\\n\\n  function devTokenBips() external view returns (uint256);\\n\\n  function ethClaimed() external view returns (bool);\\n\\n  function fem() external view returns (IFem);\\n\\n  function saleStartTime() external view returns (uint256);\\n\\n  function saleEndTime() external view returns (uint256);\\n\\n  function saleDuration() external view returns (uint256);\\n\\n  function spendDeadline() external view returns (uint256);\\n\\n  function minimumEthRaised() external view returns (uint256);\\n\\n  function depositedAmount(address) external view returns (uint256);\\n\\n  /// @notice Reports the current state of the token sale.\\n  function state() external view returns (SaleState);\\n\\n  /* Actions */\\n\\n  /// @notice Claim ETH raised through the sale for the DAO.\\n  /// note: Only callable if {state()} is {SaleState.FUNDS_PENDING}\\n  function claimETH(address to) external;\\n\\n  /// @notice Deposit ETH in exchange for equivalent amount of FEM.\\n  /// note: Only callable if {state()} is {SaleState.ACTIVE}\\n  function deposit() external payable;\\n\\n  /// @notice Burn FEM in exchange for equivalent amount of ETH.\\n  /// note: Only callable if {state()} is {SaleState.FAILURE}\\n  function burnFem(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdbe9073823f58030da244b2707b6048f001fa211d949be4e75cd9ebdfe23e553\",\"license\":\"MIT\"},\"contracts/InitializedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract InitializedOwnable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting `firstOwner` as the initial owner.\\n   */\\n  constructor(address firstOwner) {\\n    _owner = firstOwner;\\n    emit OwnershipTransferred(address(0), firstOwner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0x271dfbed48bf2db44349a34f886d7e32d5cd087186b44d59e2cc991c077a1ad2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b5060405162006c7838038062006c788339810160408190526100329161030a565b6001600160a01b03871660c0526040516000908890309060001990610056906102b0565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f080158015610090573d6000803e3d6000fd5b506001600160a01b03811660a0526040805160018082528183019092529192506000919060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905082826000815181106100fb576100fb610382565b60200260200101906001600160a01b031690816001600160a01b031681525050828160008151811061012f5761012f610382565b60200260200101906001600160a01b031690816001600160a01b03168152505060006202a3008383604051610163906102be565b61016f939291906103dc565b604051809103906000f08015801561018b573d6000803e3d6000fd5b506001600160a01b0381166080819052604051631b2b455f60e11b81527f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca56004820152306024820152919250906336568abe90604401600060405180830381600087803b1580156101fb57600080fd5b505af115801561020f573d6000803e3d6000fd5b50505050808a8a8d8b8b8b8b604051610227906102cc565b6001600160a01b0398891681529688166020880152604087019590955295909216606085015263ffffffff908116608085015290811660a084015290921660c082015260e081019190915261010001604051809103906000f080158015610292573d6000803e3d6000fd5b506001600160a01b031660e052506104119950505050505050505050565b6132da80620009e183390190565b611df48062003cbb83390190565b6111c98062005aaf83390190565b80516001600160a01b03811681146102f157600080fd5b919050565b805163ffffffff811681146102f157600080fd5b600080600080600080600060e0888a03121561032557600080fd5b61032e886102da565b965061033c602089016102da565b955060408801519450610351606089016102f6565b935061035f608089016102f6565b925061036d60a089016102f6565b915060c0880151905092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156103d15781516001600160a01b0316875295820195908201906001016103ac565b509495945050505050565b8381526060602082015260006103f56060830185610398565b82810360408401526104078185610398565b9695505050505050565b60805160a05160c05160e051610570620004716000396000818160a4015281816101220152610232015260008181606101526102cf01526000818160d50152818161039a015261043b01526000818160fc015261041301526105706000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630e9e04101461005c5780635d3ad4761461009f578063ac517bdd146100c6578063d5c20698146100d0578063f3388e75146100f7575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6100ce61011e565b005b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b60027f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c19d93fb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017957600080fd5b505afa15801561018d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b191906104b3565b60048111156101c2576101c261049d565b1461022b5760405162461bcd60e51b815260206004820152602f60248201527f43616e206e6f7420616374697661746520676f7665726e657373206265666f7260448201526e652073616c6520737563636565647360881b606482015260840160405180910390fd5b60006127107f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632127cbb76040518163ffffffff1660e01b815260040160206040518083038186803b15801561028957600080fd5b505afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906104db565b6102cd9061271061050a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032657600080fd5b505afa15801561033a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035e91906104db565b6103689190610522565b6103729190610541565b90506000610381606483610541565b60405163ece40cc160e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ece40cc190602401600060405180830381600087803b1580156103e657600080fd5b505af11580156103fa573d6000803e3d6000fd5b5050604051630a890c9160e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000016925063a890c9109150602401600060405180830381600087803b15801561048157600080fd5b505af1158015610495573d6000803e3d6000fd5b505050505050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156104c557600080fd5b8151600581106104d457600080fd5b9392505050565b6000602082840312156104ed57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561051d5761051d6104f4565b500190565b600081600019048311821515161561053c5761053c6104f4565b500290565b60008261055e57634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c6343000809000a6101606040523480156200001257600080fd5b50604051620032da380380620032da8339810160408190526200003591620004a7565b816004846001614cb48560405180604001604052806009815260200168476f7665726e65737360b81b81525080620000726200016d60201b60201c565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c0526101205250508251620001189250600091506020840190620003e4565b506200012690508362000188565b6200013182620001c9565b6200013c8162000270565b5050506001600160a01b0316610140526200015781620002b1565b5062000163816200037b565b5050505062000525565b6040805180820190915260018152603160f81b602082015290565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b600081116200022f5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b6064811115620003365760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40162000226565b600680549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b600754604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b828054620003f290620004e8565b90600052602060002090601f01602090048101928262000416576000855562000461565b82601f106200043157805160ff191683800117855562000461565b8280016001018555821562000461579182015b828111156200046157825182559160200191906001019062000444565b506200046f92915062000473565b5090565b5b808211156200046f576000815560010162000474565b80516001600160a01b0381168114620004a257600080fd5b919050565b600080600060608486031215620004bd57600080fd5b620004c8846200048a565b9250620004d8602085016200048a565b9150604084015190509250925092565b600181811c90821680620004fd57607f821691505b602082108114156200051f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051612d4c6200058e600039600081816106ce01528181611770015261184a01526000611a1301526000611a6201526000611a3d01526000611996015260006119c0015260006119ea0152612d4c6000f3fe6080604052600436106101f25760003560e01c80637d5e81e21161010d578063c59057e4116100a0578063ea0217cf1161006f578063ea0217cf1461063c578063eb9019d41461065c578063ece40cc11461067c578063f8ce560a1461069c578063fc0c546a146106bc57600080fd5b8063c59057e414610570578063d33219b414610590578063dd4e2ba5146105c2578063deaaa7cc1461060857600080fd5b8063ab58fb8e116100dc578063ab58fb8e146104fb578063b58131b01461051b578063c01f9e3714610530578063c28bc2fa1461055057600080fd5b80637d5e81e21461049257806397c3d334146104b2578063a7713a70146104c6578063a890c910146104db57600080fd5b80633bccf4fd1161018557806354fd4d501161015457806354fd4d5014610408578063567813881461043257806370b0f660146104525780637b3c71d31461047257600080fd5b80633bccf4fd1461031c5780633e4f49e61461033c5780634385963214610369578063544ffc9c146103b357600080fd5b8063160cbed7116101c1578063160cbed7146102b45780632656227d146102d45780632d63f693146102e75780633932abb11461030757600080fd5b806301ffc9a71461021a57806302a251a31461024f57806306f3f9e61461027257806306fdde031461029257600080fd5b3661021557306102006106f0565b6001600160a01b03161461021357600080fd5b005b600080fd5b34801561022657600080fd5b5061023a6102353660046121e5565b610709565b60405190151581526020015b60405180910390f35b34801561025b57600080fd5b5061026461071a565b604051908152602001610246565b34801561027e57600080fd5b5061021361028d36600461220f565b610725565b34801561029e57600080fd5b506102a7610772565b6040516102469190612284565b3480156102c057600080fd5b506102646102cf3660046124cf565b610804565b6102646102e23660046124cf565b610a22565b3480156102f357600080fd5b5061026461030236600461220f565b610af5565b34801561031357600080fd5b50610264610b2c565b34801561032857600080fd5b50610264610337366004612574565b610b37565b34801561034857600080fd5b5061035c61035736600461220f565b610bcb565b60405161024691906125d8565b34801561037557600080fd5b5061023a610384366004612600565b60008281526005602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156103bf57600080fd5b506103ed6103ce36600461220f565b6000908152600560205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610246565b34801561041457600080fd5b506040805180820190915260018152603160f81b60208201526102a7565b34801561043e57600080fd5b5061026461044d366004612630565b610bd6565b34801561045e57600080fd5b5061021361046d36600461220f565b610bff565b34801561047e57600080fd5b5061026461048d3660046126a4565b610c40565b34801561049e57600080fd5b506102646104ad3660046126fd565b610c92565b3480156104be57600080fd5b506064610264565b3480156104d257600080fd5b50600654610264565b3480156104e757600080fd5b506102136104f63660046127bd565b610ca9565b34801561050757600080fd5b5061026461051636600461220f565b610cea565b34801561052757600080fd5b50610264610d94565b34801561053c57600080fd5b5061026461054b36600461220f565b610d9f565b34801561055c57600080fd5b5061021361056b3660046127da565b610dce565b34801561057c57600080fd5b5061026461058b3660046124cf565b610e4f565b34801561059c57600080fd5b506007546001600160a01b03165b6040516001600160a01b039091168152602001610246565b3480156105ce57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102a7565b34801561061457600080fd5b506102647f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561064857600080fd5b5061021361065736600461220f565b610e89565b34801561066857600080fd5b5061026461067736600461281d565b610eca565b34801561068857600080fd5b5061021361069736600461220f565b610ed6565b3480156106a857600080fd5b506102646106b736600461220f565b610f17565b3480156106c857600080fd5b506105aa7f000000000000000000000000000000000000000000000000000000000000000081565b60006107046007546001600160a01b031690565b905090565b600061071482610f22565b92915050565b600061070460035490565b61072d6106f0565b6001600160a01b0316336001600160a01b0316146107665760405162461bcd60e51b815260040161075d90612849565b60405180910390fd5b61076f81610f47565b50565b60606000805461078190612880565b80601f01602080910402602001604051908101604052809291908181526020018280546107ad90612880565b80156107fa5780601f106107cf576101008083540402835291602001916107fa565b820191906000526020600020905b8154815290600101906020018083116107dd57829003601f168201915b5050505050905090565b60008061081386868686610e4f565b9050600461082082610bcb565b6007811115610831576108316125c2565b1461084e5760405162461bcd60e51b815260040161075d906128bb565b6007546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c92916004808301926020929190829003018186803b15801561089357600080fd5b505afa1580156108a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cb91906128fc565b60075460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610905908a908a908a906000908b906004016129de565b60206040518083038186803b15801561091d57600080fd5b505afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095591906128fc565b6000838152600860205260408082209290925560075491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb0916109a0918b918b918b91908b908990600401612a2c565b600060405180830381600087803b1580156109ba57600080fd5b505af11580156109ce573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610a009190612a9a565b6040805192835260208301919091520160405180910390a15095945050505050565b600080610a3186868686610e4f565b90506000610a3e82610bcb565b90506004816007811115610a5457610a546125c2565b1480610a7157506005816007811115610a6f57610a6f6125c2565b145b610a8d5760405162461bcd60e51b815260040161075d906128bb565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610aeb828888888861100f565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b600061070460025490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610ba390610b9b906080016040516020818303038152906040528051906020012061101c565b86868661106a565b9050610bc087828860405180602001604052806000815250611088565b979650505050505050565b600061071482611193565b600080339050610bf784828560405180602001604052806000815250611088565b949350505050565b610c076106f0565b6001600160a01b0316336001600160a01b031614610c375760405162461bcd60e51b815260040161075d90612849565b61076f816112fb565b600080339050610c8886828787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108892505050565b9695505050505050565b6000610ca08585858561133c565b95945050505050565b610cb16106f0565b6001600160a01b0316336001600160a01b031614610ce15760405162461bcd60e51b815260040161075d90612849565b61076f81611617565b60075460008281526008602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c44359060240160206040518083038186803b158015610d4257600080fd5b505afa158015610d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7a91906128fc565b905080600114610d8a5780610d8d565b60005b9392505050565b600061070460045490565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610b1d565b610dd66106f0565b6001600160a01b0316336001600160a01b031614610e065760405162461bcd60e51b815260040161075d90612849565b610e488483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250611680915050565b5050505050565b600084848484604051602001610e689493929190612ab2565b60408051601f19818403018152919052805160209091012095945050505050565b610e916106f0565b6001600160a01b0316336001600160a01b031614610ec15760405162461bcd60e51b815260040161075d90612849565b61076f816116a6565b6000610d8d8383611747565b610ede6106f0565b6001600160a01b0316336001600160a01b031614610f0e5760405162461bcd60e51b815260040161075d90612849565b61076f816117ec565b60006107148261182d565b60006001600160e01b03198216636e665ced60e01b14806107145750610714826118e0565b6064811115610fca5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40161075d565b600680549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b610e488585858585611915565b6000610714611029611989565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061107b87878787611ab0565b91509150610aeb81611b9d565b60008481526001602081905260408220906110a287610bcb565b60078111156110b3576110b36125c2565b1461110c5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b606482015260840161075d565b604080516020810190915281546001600160401b031690819052600090611134908790610eca565b905061114287878784611d58565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda4888784886040516111819493929190612afd565b60405180910390a29695505050505050565b60008061119f83611ed7565b905060048160078111156111b5576111b56125c2565b146111c05792915050565b600083815260086020526040902054806111db575092915050565b600754604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f5299060240160206040518083038186803b15801561121f57600080fd5b505afa158015611233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112579190612b25565b15611266575060079392505050565b600754604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e9060240160206040518083038186803b1580156112aa57600080fd5b505afa1580156112be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e29190612b25565b156112f1575060059392505050565b5060029392505050565b60025460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600255565b6000611346610d94565b61135533610677600143612b47565b10156113d55760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a40161075d565b60006113ea8686868680519060200120610e4f565b9050845186511461140d5760405162461bcd60e51b815260040161075d90612b5e565b835186511461142e5760405162461bcd60e51b815260040161075d90612b5e565b600086511161147f5760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c0000000000000000604482015260640161075d565b600081815260016020908152604091829020825191820190925281546001600160401b031690819052156114ff5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b606482015260840161075d565b600061151161150c610b2c565b611fe3565b61151a43611fe3565b6115249190612b9f565b9050600061153361150c61071a565b61153d9083612b9f565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b038111156115b5576115b5612297565b6040519080825280602002602001820160405280156115e857816020015b60608152602001906001900390816115d35790505b508c88888e60405161160299989796959493929190612bca565b60405180910390a15091979650505050505050565b600754604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6060610bf7848484604051806060016040528060298152602001612d176029913961204f565b600081116117065760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b606482015260840161075d565b60035460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600355565b604051630748d63560e31b81526001600160a01b038381166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a89060440160206040518083038186803b1580156117b457600080fd5b505afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d91906128fc565b60045460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600455565b60006064600654604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c9060240160206040518083038186803b15801561189457600080fd5b505afa1580156118a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cc91906128fc565b6118d69190612cb9565b6107149190612cd8565b60006001600160e01b0319821663bf26d89760e01b148061071457506301ffc9a760e01b6001600160e01b0319831614610714565b60075460405163e38335e560e01b81526001600160a01b039091169063e38335e59034906119509088908890889060009089906004016129de565b6000604051808303818588803b15801561196957600080fd5b505af115801561197d573d6000803e3d6000fd5b50505050505050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156119e257507f000000000000000000000000000000000000000000000000000000000000000046145b15611a0c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611ae75750600090506003611b94565b8460ff16601b14158015611aff57508460ff16601c14155b15611b105750600090506004611b94565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611b64573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b8d57600060019250925050611b94565b9150600090505b94509492505050565b6000816004811115611bb157611bb16125c2565b1415611bba5750565b6001816004811115611bce57611bce6125c2565b1415611c1c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161075d565b6002816004811115611c3057611c306125c2565b1415611c7e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161075d565b6003816004811115611c9257611c926125c2565b1415611ceb5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161075d565b6004816004811115611cff57611cff6125c2565b141561076f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161075d565b60008481526005602090815260408083206001600160a01b0387168452600381019092529091205460ff1615611de05760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b606482015260840161075d565b6001600160a01b03841660009081526003820160205260408120805460ff1916600117905560ff168360ff161415611e315781816000016000828254611e269190612a9a565b90915550610e489050565b60ff831660011415611e515781816001016000828254611e269190612a9a565b60ff831660021415611e715781816002016000828254611e269190612a9a565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b606482015260840161075d565b6000818152600160205260408120600281015460ff1615611efb5750600792915050565b6002810154610100900460ff1615611f165750600292915050565b6000611f2184610af5565b905080611f705760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964000000604482015260640161075d565b438110611f81575060009392505050565b6000611f8c85610d9f565b9050438110611fa057506001949350505050565b611fa985612175565b8015611fc8575060008581526005602052604090208054600190910154115b15611fd857506004949350505050565b506003949350505050565b60006001600160401b0382111561204b5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161075d565b5090565b6060824710156120b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161075d565b6001600160a01b0385163b6121075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161075d565b600080866001600160a01b031685876040516121239190612cfa565b60006040518083038185875af1925050503d8060008114612160576040519150601f19603f3d011682016040523d82523d6000602084013e612165565b606091505b5091509150610bc08282866121ac565b6000818152600560205260408120600281015460018201546121979190612a9a565b6121a36106b785610af5565b11159392505050565b606083156121bb575081610d8d565b8251156121cb5782518084602001fd5b8160405162461bcd60e51b815260040161075d9190612284565b6000602082840312156121f757600080fd5b81356001600160e01b031981168114610d8d57600080fd5b60006020828403121561222157600080fd5b5035919050565b60005b8381101561224357818101518382015260200161222b565b83811115612252576000848401525b50505050565b60008151808452612270816020860160208601612228565b601f01601f19169290920160200192915050565b602081526000610d8d6020830184612258565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156122d5576122d5612297565b604052919050565b60006001600160401b038211156122f6576122f6612297565b5060051b60200190565b6001600160a01b038116811461076f57600080fd5b600082601f83011261232657600080fd5b8135602061233b612336836122dd565b6122ad565b82815260059290921b8401810191818101908684111561235a57600080fd5b8286015b8481101561237e57803561237181612300565b835291830191830161235e565b509695505050505050565b600082601f83011261239a57600080fd5b813560206123aa612336836122dd565b82815260059290921b840181019181810190868411156123c957600080fd5b8286015b8481101561237e57803583529183019183016123cd565b60006001600160401b038311156123fd576123fd612297565b612410601f8401601f19166020016122ad565b905082815283838301111561242457600080fd5b828260208301376000602084830101529392505050565b600082601f83011261244c57600080fd5b8135602061245c612336836122dd565b82815260059290921b8401810191818101908684111561247b57600080fd5b8286015b8481101561237e5780356001600160401b0381111561249e5760008081fd5b8701603f810189136124b05760008081fd5b6124c18986830135604084016123e4565b84525091830191830161247f565b600080600080608085870312156124e557600080fd5b84356001600160401b03808211156124fc57600080fd5b61250888838901612315565b9550602087013591508082111561251e57600080fd5b61252a88838901612389565b9450604087013591508082111561254057600080fd5b5061254d8782880161243b565b949793965093946060013593505050565b803560ff8116811461256f57600080fd5b919050565b600080600080600060a0868803121561258c57600080fd5b8535945061259c6020870161255e565b93506125aa6040870161255e565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106125fa57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561261357600080fd5b82359150602083013561262581612300565b809150509250929050565b6000806040838503121561264357600080fd5b823591506126536020840161255e565b90509250929050565b60008083601f84011261266e57600080fd5b5081356001600160401b0381111561268557600080fd5b60208301915083602082850101111561269d57600080fd5b9250929050565b600080600080606085870312156126ba57600080fd5b843593506126ca6020860161255e565b925060408501356001600160401b038111156126e557600080fd5b6126f18782880161265c565b95989497509550505050565b6000806000806080858703121561271357600080fd5b84356001600160401b038082111561272a57600080fd5b61273688838901612315565b9550602087013591508082111561274c57600080fd5b61275888838901612389565b9450604087013591508082111561276e57600080fd5b61277a8883890161243b565b9350606087013591508082111561279057600080fd5b508501601f810187136127a257600080fd5b6127b1878235602084016123e4565b91505092959194509250565b6000602082840312156127cf57600080fd5b8135610d8d81612300565b600080600080606085870312156127f057600080fd5b84356127fb81612300565b93506020850135925060408501356001600160401b038111156126e557600080fd5b6000806040838503121561283057600080fd5b823561283b81612300565b946020939093013593505050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061289457607f821691505b602082108114156128b557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b60006020828403121561290e57600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561294e5781516001600160a01b031687529582019590820190600101612929565b509495945050505050565b600081518084526020808501945080840160005b8381101561294e5781518752958201959082019060010161296d565b600081518084526020808501808196508360051b8101915082860160005b858110156129d15782840389526129bf848351612258565b988501989350908401906001016129a7565b5091979650505050505050565b60a0815260006129f160a0830188612915565b8281036020840152612a038188612959565b90508281036040840152612a178187612989565b60608401959095525050608001529392505050565b60c081526000612a3f60c0830189612915565b8281036020840152612a518189612959565b90508281036040840152612a658188612989565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612aad57612aad612a84565b500190565b608081526000612ac56080830187612915565b8281036020840152612ad78187612959565b90508281036040840152612aeb8186612989565b91505082606083015295945050505050565b84815260ff84166020820152826040820152608060608201526000610c886080830184612258565b600060208284031215612b3757600080fd5b81518015158114610d8d57600080fd5b600082821015612b5957612b59612a84565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115612bc157612bc1612a84565b01949350505050565b60006101208b8352602060018060a01b038c1681850152816040850152612bf38285018c612915565b91508382036060850152612c07828b612959565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015612c5857601f19878403018552612c46838351612258565b94860194925090850190600101612c2a565b505086810360a0880152612c6c818c612989565b945050505050612c8760c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152612ca98185612258565b9c9b505050505050505050505050565b6000816000190483118215151615612cd357612cd3612a84565b500290565b600082612cf557634e487b7160e01b600052601260045260246000fd5b500490565b60008251612d0c818460208701612228565b919091019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a164736f6c6343000809000a60806040523480156200001157600080fd5b5060405162001df438038062001df48339810160408190526200003491620003a4565b6200004f60008051602062001d9483398151915280620001c9565b6200007960008051602062001db483398151915260008051602062001d94833981519152620001c9565b620000a360008051602062001dd483398151915260008051602062001d94833981519152620001c9565b620000be60008051602062001d948339815191523362000214565b620000d960008051602062001d948339815191523062000214565b60005b825181101562000136576200012360008051602062001db48339815191528483815181106200010f576200010f62000418565b60200260200101516200021460201b60201c565b6200012e816200042e565b9050620000dc565b5060005b815181101562000180576200016d60008051602062001dd48339815191528383815181106200010f576200010f62000418565b62000178816200042e565b90506200013a565b5060028390556040805160008152602081018590527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a150505062000458565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b62000220828262000224565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000220576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002803390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002f257600080fd5b919050565b600082601f8301126200030957600080fd5b815160206001600160401b0380831115620003285762000328620002c4565b8260051b604051601f19603f83011681018181108482111715620003505762000350620002c4565b6040529384528581018301938381019250878511156200036f57600080fd5b83870191505b8482101562000399576200038982620002da565b8352918301919083019062000375565b979650505050505050565b600080600060608486031215620003ba57600080fd5b835160208501519093506001600160401b0380821115620003da57600080fd5b620003e887838801620002f7565b93506040860151915080821115620003ff57600080fd5b506200040e86828701620002f7565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200045157634e487b7160e01b600052601160045260246000fd5b5060010190565b61192c80620004686000396000f3fe60806040526004361061014f5760003560e01c806364d62353116100b6578063b1c5f4271161006f578063b1c5f427146103f3578063c4d252f514610413578063d45c443514610433578063d547741f14610460578063e38335e514610480578063f27a0c921461049357600080fd5b806364d623531461033c5780638065657f1461035c5780638f2a0bb01461037c5780638f61f4f51461039c57806391d14854146103be578063a217fddf146103de57600080fd5b8063248a9ca311610108578063248a9ca31461025b5780632ab0f5291461028b5780632f2ff15d146102bc57806331d50750146102dc57806336568abe146102fc578063584b153e1461031c57600080fd5b806301d5062a1461015b57806301ffc9a71461017d57806307bd0265146101b25780630d3cf6fc146101f4578063134008d31461022857806313bc9f201461023b57600080fd5b3661015657005b600080fd5b34801561016757600080fd5b5061017b6101763660046111b5565b6104a8565b005b34801561018957600080fd5b5061019d61019836600461122a565b61052c565b60405190151581526020015b60405180910390f35b3480156101be57600080fd5b506101e67fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b6040519081526020016101a9565b34801561020057600080fd5b506101e67f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca581565b61017b610236366004611254565b610563565b34801561024757600080fd5b5061019d6102563660046112c0565b6105db565b34801561026757600080fd5b506101e66102763660046112c0565b60009081526020819052604090206001015490565b34801561029757600080fd5b5061019d6102a63660046112c0565b6000908152600160208190526040909120541490565b3480156102c857600080fd5b5061017b6102d73660046112d9565b610601565b3480156102e857600080fd5b5061019d6102f73660046112c0565b61062c565b34801561030857600080fd5b5061017b6103173660046112d9565b610645565b34801561032857600080fd5b5061019d6103373660046112c0565b6106c8565b34801561034857600080fd5b5061017b6103573660046112c0565b6106de565b34801561036857600080fd5b506101e6610377366004611254565b610782565b34801561038857600080fd5b5061017b61039736600461134a565b6107c1565b3480156103a857600080fd5b506101e660008051602061190083398151915281565b3480156103ca57600080fd5b5061019d6103d93660046112d9565b610902565b3480156103ea57600080fd5b506101e6600081565b3480156103ff57600080fd5b506101e661040e3660046113fc565b61092b565b34801561041f57600080fd5b5061017b61042e3660046112c0565b610970565b34801561043f57600080fd5b506101e661044e3660046112c0565b60009081526001602052604090205490565b34801561046c57600080fd5b5061017b61047b3660046112d9565b610a34565b61017b61048e3660046113fc565b610a5a565b34801561049f57600080fd5b506002546101e6565b6000805160206119008339815191526104c18133610b8f565b60006104d1898989898989610782565b90506104dd8184610bf3565b6000817f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b8b8b8b8a604051610519969594939291906114ce565b60405180910390a3505050505050505050565b60006001600160e01b03198216637965db0b60e01b148061055d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6361058f816000610902565b61059d5761059d8133610b8f565b60006105ad888888888888610782565b90506105b98185610ce2565b6105c88160008a8a8a8a610d7e565b6105d181610e92565b5050505050505050565b6000818152600160205260408120546001811180156105fa5750428111155b9392505050565b60008281526020819052604090206001015461061d8133610b8f565b6106278383610ecb565b505050565b60008181526001602052604081205481905b1192915050565b6001600160a01b03811633146106ba5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106c48282610f4f565b5050565b600081815260016020819052604082205461063e565b3330146107415760405162461bcd60e51b815260206004820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b60648201526084016106b1565b60025460408051918252602082018390527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a1600255565b600086868686868660405160200161079f969594939291906114ce565b6040516020818303038152906040528051906020012090509695505050505050565b6000805160206119008339815191526107da8133610b8f565b8887146107f95760405162461bcd60e51b81526004016106b19061150b565b8885146108185760405162461bcd60e51b81526004016106b19061150b565b600061082a8b8b8b8b8b8b8b8b61092b565b90506108368184610bf3565b60005b8a8110156108f45780827f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8e8e858181106108765761087661154e565b905060200201602081019061088b9190611564565b8d8d8681811061089d5761089d61154e565b905060200201358c8c878181106108b6576108b661154e565b90506020028101906108c8919061157f565b8c8b6040516108dc969594939291906114ce565b60405180910390a36108ed816115dc565b9050610839565b505050505050505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000888888888888888860405160200161094c98979695949392919061168c565b60405160208183030381529060405280519060200120905098975050505050505050565b6000805160206119008339815191526109898133610b8f565b610992826106c8565b6109f85760405162461bcd60e51b815260206004820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b60648201526084016106b1565b6000828152600160205260408082208290555183917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a25050565b600082815260208190526040902060010154610a508133610b8f565b6106278383610f4f565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610a86816000610902565b610a9457610a948133610b8f565b878614610ab35760405162461bcd60e51b81526004016106b19061150b565b878414610ad25760405162461bcd60e51b81526004016106b19061150b565b6000610ae48a8a8a8a8a8a8a8a61092b565b9050610af08185610ce2565b60005b89811015610b7957610b6982828d8d85818110610b1257610b1261154e565b9050602002016020810190610b279190611564565b8c8c86818110610b3957610b3961154e565b905060200201358b8b87818110610b5257610b5261154e565b9050602002810190610b64919061157f565b610d7e565b610b72816115dc565b9050610af3565b50610b8381610e92565b50505050505050505050565b610b998282610902565b6106c457610bb1816001600160a01b03166014610fb4565b610bbc836020610fb4565b604051602001610bcd929190611767565b60408051601f198184030181529082905262461bcd60e51b82526106b1916004016117dc565b610bfc8261062c565b15610c615760405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b60648201526084016106b1565b600254811015610cc25760405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b60648201526084016106b1565b610ccc814261180f565b6000928352600160205260409092209190915550565b610ceb826105db565b610d075760405162461bcd60e51b81526004016106b190611827565b801580610d235750600081815260016020819052604090912054145b6106c45760405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b60648201526084016106b1565b6000846001600160a01b0316848484604051610d9b929190611871565b60006040518083038185875af1925050503d8060008114610dd8576040519150601f19603f3d011682016040523d82523d6000602084013e610ddd565b606091505b5050905080610e4a5760405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b60648201526084016106b1565b85877fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5887878787604051610e819493929190611881565b60405180910390a350505050505050565b610e9b816105db565b610eb75760405162461bcd60e51b81526004016106b190611827565b600090815260016020819052604090912055565b610ed58282610902565b6106c4576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f0b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f598282610902565b156106c4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610fc38360026118b3565b610fce90600261180f565b67ffffffffffffffff811115610fe657610fe66118d2565b6040519080825280601f01601f191660200182016040528015611010576020820181803683370190505b509050600360fc1b8160008151811061102b5761102b61154e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061105a5761105a61154e565b60200101906001600160f81b031916908160001a905350600061107e8460026118b3565b61108990600161180f565b90505b6001811115611101576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106110bd576110bd61154e565b1a60f81b8282815181106110d3576110d361154e565b60200101906001600160f81b031916908160001a90535060049490941c936110fa816118e8565b905061108c565b5083156105fa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b1565b80356001600160a01b038116811461116757600080fd5b919050565b60008083601f84011261117e57600080fd5b50813567ffffffffffffffff81111561119657600080fd5b6020830191508360208285010111156111ae57600080fd5b9250929050565b600080600080600080600060c0888a0312156111d057600080fd5b6111d988611150565b965060208801359550604088013567ffffffffffffffff8111156111fc57600080fd5b6112088a828b0161116c565b989b979a50986060810135976080820135975060a09091013595509350505050565b60006020828403121561123c57600080fd5b81356001600160e01b0319811681146105fa57600080fd5b60008060008060008060a0878903121561126d57600080fd5b61127687611150565b955060208701359450604087013567ffffffffffffffff81111561129957600080fd5b6112a589828a0161116c565b979a9699509760608101359660809091013595509350505050565b6000602082840312156112d257600080fd5b5035919050565b600080604083850312156112ec57600080fd5b823591506112fc60208401611150565b90509250929050565b60008083601f84011261131757600080fd5b50813567ffffffffffffffff81111561132f57600080fd5b6020830191508360208260051b85010111156111ae57600080fd5b600080600080600080600080600060c08a8c03121561136857600080fd5b893567ffffffffffffffff8082111561138057600080fd5b61138c8d838e01611305565b909b50995060208c01359150808211156113a557600080fd5b6113b18d838e01611305565b909950975060408c01359150808211156113ca57600080fd5b506113d78c828d01611305565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b60008060008060008060008060a0898b03121561141857600080fd5b883567ffffffffffffffff8082111561143057600080fd5b61143c8c838d01611305565b909a50985060208b013591508082111561145557600080fd5b6114618c838d01611305565b909850965060408b013591508082111561147a57600080fd5b506114878b828c01611305565b999c989b509699959896976060870135966080013595509350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b038716815285602082015260a0604082015260006114f660a0830186886114a5565b60608301949094525060800152949350505050565b60208082526023908201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616040820152620e8c6d60eb1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561157657600080fd5b6105fa82611150565b6000808335601e1984360301811261159657600080fd5b83018035915067ffffffffffffffff8211156115b157600080fd5b6020019150368190038213156111ae57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156115f0576115f06115c6565b5060010190565b60008383855260208086019550808560051b8301018460005b8781101561167f57848303601f19018952813536889003601e1901811261163657600080fd5b8701803567ffffffffffffffff81111561164f57600080fd5b80360389131561165e57600080fd5b61166b85828885016114a5565b9a86019a9450505090830190600101611610565b5090979650505050505050565b60a0808252810188905260008960c08301825b8b8110156116cd576001600160a01b036116b884611150565b1682526020928301929091019060010161169f565b5083810360208501528881526001600160fb1b038911156116ed57600080fd5b8860051b9150818a60208301378181019150506020810160008152602084830301604085015261171e81888a6115f7565b6060850196909652505050608001529695505050505050565b60005b8381101561175257818101518382015260200161173a565b83811115611761576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161179f816017850160208801611737565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516117d0816028840160208801611737565b01602801949350505050565b60208152600082518060208401526117fb816040850160208701611737565b601f01601f19169190910160400192915050565b60008219821115611822576118226115c6565b500190565b6020808252602a908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604082015269206e6f7420726561647960b01b606082015260800190565b8183823760009101908152919050565b60018060a01b03851681528360208201526060604082015260006118a96060830184866114a5565b9695505050505050565b60008160001904831182151516156118cd576118cd6115c6565b500290565b634e487b7160e01b600052604160045260246000fd5b6000816118f7576118f76115c6565b50600019019056feb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1a164736f6c6343000809000a5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5b09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e636101806040523480156200001257600080fd5b50604051620011c9380380620011c983398101604081905262000035916200020f565b600080546001600160a01b0319166001600160a01b038a1690811782556040518a92907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060008611620000d45760405162461bcd60e51b815260206004820152601960248201527f646576546f6b656e426970732063616e206e6f7420626520300000000000000060448201526064015b60405180910390fd5b6103e8861115620001285760405162461bcd60e51b815260206004820152601560248201527f646576546f6b656e4269707320746f6f206869676800000000000000000000006044820152606401620000cb565b428463ffffffff1611620001715760405162461bcd60e51b815260206004820152600f60248201526e737461727420746f6f206561726c7960881b6044820152606401620000cb565b6001600160a01b0380881660a05260c0879052851660805263ffffffff841660e0526000620001a18486620002bb565b63ffffffff908116610100819052858216610120529150620001c690841682620002e6565b610140525061016052506200030195505050505050565b80516001600160a01b0381168114620001f557600080fd5b919050565b805163ffffffff81168114620001f557600080fd5b600080600080600080600080610100898b0312156200022d57600080fd5b6200023889620001dd565b97506200024860208a01620001dd565b9650604089015195506200025f60608a01620001dd565b94506200026f60808a01620001fa565b93506200027f60a08a01620001fa565b92506200028f60c08a01620001fa565b915060e089015190509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818516808303821115620002dd57620002dd620002a5565b01949350505050565b60008219821115620002fc57620002fc620002a5565b500190565b60805160a05160c05160e05161010051610120516101405161016051610e15620003b46000396000818161027101526108dc0152600081816103750152610905015260006101dc0152600081816103a9015261089601526000818161016601526108680152600081816101a801526106a2015260008181610210015261067e015260008181610115015281816104780152818161064f015281816106c3015281816107c60152610a240152610e156000f3fe6080604052600436106100fe5760003560e01c8063564ff4ad11610095578063c19d93fb11610064578063c19d93fb14610339578063d0e30db01461035b578063e065e87214610363578063ed338ff114610397578063f2fde38b146103cb57600080fd5b8063564ff4ad146102b5578063715018a6146102e65780637e66c0b9146102fb5780638da5cb5b1461031b57600080fd5b80633ad10ef6116100d15780633ad10ef6146101fe5780634a4643f71461023257806355c64bfe1461025f578063563ff2731461029357600080fd5b80630e9e0410146101035780631cbaee2d146101545780632127cbb7146101965780633711d9fb146101ca575b600080fd5b34801561010f57600080fd5b506101377f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016057600080fd5b506101887f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014b565b3480156101a257600080fd5b506101887f000000000000000000000000000000000000000000000000000000000000000081565b3480156101d657600080fd5b506101887f000000000000000000000000000000000000000000000000000000000000000081565b34801561020a57600080fd5b506101377f000000000000000000000000000000000000000000000000000000000000000081565b34801561023e57600080fd5b5061018861024d366004610c4d565b60016020526000908152604090205481565b34801561026b57600080fd5b506101887f000000000000000000000000000000000000000000000000000000000000000081565b34801561029f57600080fd5b506102b36102ae366004610c7d565b6103eb565b005b3480156102c157600080fd5b506000546102d690600160a01b900460ff1681565b604051901515815260200161014b565b3480156102f257600080fd5b506102b3610526565b34801561030757600080fd5b506102b3610316366004610c4d565b61055c565b34801561032757600080fd5b506000546001600160a01b0316610137565b34801561034557600080fd5b5061034e610864565b60405161014b9190610cac565b6102b3610939565b34801561036f57600080fd5b506101887f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a357600080fd5b506101887f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d757600080fd5b506102b36103e6366004610c4d565b610ac1565b60408051808201909152601381527214d85b19481a185cc81b9bdd0819985a5b1959606a1b602082015260049081610421610864565b600481111561043257610432610c96565b14819061045b5760405162461bcd60e51b81526004016104529190610cd4565b60405180910390fd5b50604051632770a7eb60e21b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639dc29fac90604401600060405180830381600087803b1580156104c457600080fd5b505af11580156104d8573d6000803e3d6000fd5b505050506104ec6104e63390565b84610b5c565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a2505050565b6000546001600160a01b031633146105505760405162461bcd60e51b815260040161045290610d29565b61055a6000610bfd565b565b6000546001600160a01b031633146105865760405162461bcd60e51b815260040161045290610d29565b6002604051806060016040528060228152602001610de7602291398160048111156105b3576105b3610c96565b6105bb610864565b60048111156105cc576105cc610c96565b1481906105ec5760405162461bcd60e51b81526004016104529190610cd4565b506000805460ff60a01b1916600160a01b1790554761060b8482610b5c565b604080516001600160a01b0386168152602081018390527f0d7976053781e071cecf47e898ad2a6dc87621ca33734e96eb4b92453319e8c9910160405180910390a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f197f00000000000000000000000000000000000000000000000000000000000000006127107f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071a57600080fd5b505afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190610d5e565b61075c9190610d8d565b6107669190610dac565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156107ac57600080fd5b505af11580156107c0573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2fde38b6108056000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561084657600080fd5b505af115801561085a573d6000803e3d6000fd5b5050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004210156108945750600090565b7f00000000000000000000000000000000000000000000000000000000000000004210156108c25750600190565b600054600160a01b900460ff16156108da5750600390565b7f000000000000000000000000000000000000000000000000000000000000000047108061092857507f00000000000000000000000000000000000000000000000000000000000000004210155b156109335750600490565b50600290565b60408051808201909152600f81526e53616c65206e6f742061637469766560881b60208201526001908161096b610864565b600481111561097c5761097c610c96565b14819061099c5760405162461bcd60e51b81526004016104529190610cd4565b50600034116109e55760405162461bcd60e51b8152602060048201526015602482015274086c2dc40dcdee840c8cae0dee6d2e84060408aa89605b1b6044820152606401610452565b3360009081526001602052604081208054349290610a04908490610dce565b90915550506040516340c10f1960e01b81523360048201523460248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b158015610a7057600080fd5b505af1158015610a84573d6000803e3d6000fd5b50506040513481523392507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c915060200160405180910390a25050565b6000546001600160a01b03163314610aeb5760405162461bcd60e51b815260040161045290610d29565b6001600160a01b038116610b505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610452565b610b5981610bfd565b50565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610ba9576040519150601f19603f3d011682016040523d82523d6000602084013e610bae565b606091505b5050905080610bf85760405162461bcd60e51b815260206004820152601660248201527508cc2d2d8cac840e8de40e8e4c2dce6cccae4408aa8960531b6044820152606401610452565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610c5f57600080fd5b81356001600160a01b0381168114610c7657600080fd5b9392505050565b600060208284031215610c8f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160058310610cce57634e487b7160e01b600052602160045260246000fd5b91905290565b600060208083528351808285015260005b81811015610d0157858101830151858201604001528201610ce5565b81811115610d13576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610d7057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610da757610da7610d77565b500290565b600082610dc957634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610de157610de1610d77565b50019056fe46756e6473206e6f742070656e64696e6720676f7665726e616e636520636c61696da164736f6c6343000809000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80630e9e04101461005c5780635d3ad4761461009f578063ac517bdd146100c6578063d5c20698146100d0578063f3388e75146100f7575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6100ce61011e565b005b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b60027f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c19d93fb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017957600080fd5b505afa15801561018d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b191906104b3565b60048111156101c2576101c261049d565b1461022b5760405162461bcd60e51b815260206004820152602f60248201527f43616e206e6f7420616374697661746520676f7665726e657373206265666f7260448201526e652073616c6520737563636565647360881b606482015260840160405180910390fd5b60006127107f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632127cbb76040518163ffffffff1660e01b815260040160206040518083038186803b15801561028957600080fd5b505afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906104db565b6102cd9061271061050a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032657600080fd5b505afa15801561033a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035e91906104db565b6103689190610522565b6103729190610541565b90506000610381606483610541565b60405163ece40cc160e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ece40cc190602401600060405180830381600087803b1580156103e657600080fd5b505af11580156103fa573d6000803e3d6000fd5b5050604051630a890c9160e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000016925063a890c9109150602401600060405180830381600087803b15801561048157600080fd5b505af1158015610495573d6000803e3d6000fd5b505050505050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156104c557600080fd5b8151600581106104d457600080fd5b9392505050565b6000602082840312156104ed57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561051d5761051d6104f4565b500190565b600081600019048311821515161561053c5761053c6104f4565b500290565b60008261055e57634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c6343000809000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Deployer for Fem governance contracts and FemErecter. Deploys governance in an unusable state, then activates the contracts once the sale is successful.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}